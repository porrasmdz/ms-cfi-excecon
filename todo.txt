[DONE] *Implementar Pandas DFs + Dask para paralelizar eventualmente 
====IMPORTANT ====
* DEFER WORKLOAD OF CLOSING A CYCLIC COUNT TO A WORKER AND USE LAZY DYNAMIC
* TEST ASSIGN AND UNASSING M2M, M2O MODELS EG.: [PUT] PRODUCTS W/ MU_UNIT 
* CORRECT PRODUCT ASSIGNING ITS RESULT FROM MUNITS, IN UPLOAD FILE, IT SHOULD CHECK SYS_UNITS IS NOT NULL AND WARN ABOUT IT
* CHECK FOR WAREHOUSE AND WHLOCATIONS IN REPORT CREATION TAKE IT FROM FILE NOT FROM CCOUNT
* SERVE HTTPONLY COOKIE FROM SERVER SIDE
[DONE] *****REFACTOR USING DATAREPOSITORY AND RESOURCEROUTE IN SERVICE.PY

Alembic Stuff:
* APPLY ON DELETE CASCADE TO THE ALEMBIC FILE (ALSO THE DOWNGRADE) AND UPGRADE
* ADD TO ALEMBIC UPGRADE THE USERS, ACCESS TOKEN AND OTHER FASTAPI USERS MODEL
* ADD TO ALEMBIC COMMIT PERMISSIONS TO permissions create update delete read
* ADD MATERIALIZED VIEWS REPORTS TO ALEMBIC


Inventory Module:
[DONE] 1. Crear los Modelos models.py [DONE]
[DONE] 2. Crear los CRUD operations en services.py [DONE]
[DONE] 3. Crear las rutas [Done]
[DONE] 3.1 Crear dependencies para hacer las aggregations, filters, sortbys y paginations de sql [DONE]
[DONE] 3.2 Implementar Alembic [DONE]
[DONE] 4. Crear el frontend con react admin [DONE]

Cyclic Count Module:
[DONE] 1. Crear los Modelos models.py [DONE]
[DONE] 2. Crear los CRUD operations en services.py [DONE]
[DONE] 3. Crear las rutas [DONE]
[DONE] 3.1 Crear dependencies para hacer las aggregations, filters, sortbys y paginations de sql [DONE]
[DONE] 3.2 Implementar Alembic [Done]
[DONE] 4. Crear el frontend con react admin [DONE]
[DONE] 5. Use ETL pandas to query and organize data in nested_products

Company Listing Module:
[DONE] 1. Crear los Modelos models.py [DONE]
[DONE] 2. Crear los CRUD operations en services.py [DONE]
[DONE] 3. Crear las rutas [DONE]
[DONE] 3.1 Crear dependencies para hacer las aggregations, filters, sortbys y paginations de sql [DONE]
[DONE] 3.2 Implementar Alembic [Done]
[DONE] 4. Crear el frontend con react admin [DONE]

ETL_PIPELINES:
[DONE] 1. Crear un componente base ETL (Mas detalles en modulo)
[DONE] 1.2. Crear un historial de filtros aplicados a un reporte para el drilldown
[DONE] 2. Crear File Exporter (To xl)
[DONE] 3. Crear File Reader (from xl and checking data and/or cleaning it)

Auth Module:
[DONE] 1. Crear los Modelos models.py 
[DONE] 2. Crear los CRUD operations en services.py 
[DONE] 3. Crear las rutas 
[DONE] 3.1 Crear dependencies para hacer las aggregations, filters, sortbys y paginations de sql [DONE]
3.2 Implementar Alembic
4. Crear el frontend con react admin

PRE-RELEASE:
[DONE, I DONT, MIGRATE MANUALLY] 0. VALIDATE IF I DONT NEED TO USE INIT_DB WHEN USING ALEMBIC MIGRATIONS
[DONE THROUGH CLASS] 0.1 ADD "IF RELATED FIELD NOT FOUND THROW HTTP EXCEPTION 404"
1. Complete Business Logic
[DONE]    1.1. Create a Cyclic Count [DONE]
[DONE]    1.2. Generate Report and Cyclic Count Results
[DONE]    1.3. Upload File 
[DONE]        1.3.1 and Export File to create Cyclic Count [DONE]
[DEFERRED]    1.4. Consolidated Cyclic Count [A WRAPPER THAT JOINS ALL COUNTS IN A SINGLE ONE THROUGH MATERIALIZED VIEW]
[DONE]    1.5. Check history of my Cyclic Count and Registry Logs 
          1.6. Expose cyclic_count_reports on router 
          1.7. Update difference units and difference cost on physical registry_type update/creation
2. Implement Cyclic Count Kanban At Home
3. Deployment files
4. Multitenancy
5. Use enums instead of string where applies status, registry type, etc...

Testing
***0. ADAPT TESTS TO LOGIN AT START
[DONE] 1. Unit testing for Inventory models 
[DONE] 2. Unit testing for Cyclic Count models 
[DONE] 3. Unit testing for companies models 
4. Unit Testing for auth models
5. Unit Testing for ETL models

DOCS
1. Populate OpenAPI Docs (api tags, model examples, return codes, error codes)
[DONE] 2. Map exceptions to HTTP_exceptions 
[DONE] 3. Add needed headers to responses
