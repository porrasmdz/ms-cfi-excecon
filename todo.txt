*Implementar Pandas DFs + Dask para paralelizar eventualmente 

Inventory Module:
1. Crear los Modelos models.py [DONE]
2. Crear los CRUD operations en services.py [DONE]
3. Crear las rutas [Done]
3.1 Crear dependencies para hacer las aggregations, filters, sortbys y paginations de sql [DONE]
3.2 Implementar Alembic [DONE]
4. Crear el frontend con react admin [DONE]

Cyclic Count Module:
1. Crear los Modelos models.py [DONE]
2. Crear los CRUD operations en services.py [DONE]
3. Crear las rutas [DONE]
3.1 Crear dependencies para hacer las aggregations, filters, sortbys y paginations de sql [DONE]
3.2 Implementar Alembic [Done]
4. Crear el frontend con react admin [DONE]
5. Use ETL pandas to query and organize data in nested_products

Company Listing Module:
1. Crear los Modelos models.py [DONE]
2. Crear los CRUD operations en services.py [DONE]
3. Crear las rutas [DONE]
3.1 Crear dependencies para hacer las aggregations, filters, sortbys y paginations de sql [DONE]
3.2 Implementar Alembic [Done]
4. Crear el frontend con react admin [DONE]

Auth Module:
1. Crear los Modelos models.py 
2. Crear los CRUD operations en services.py 
3. Crear las rutas 
3.1 Crear dependencies para hacer las aggregations, filters, sortbys y paginations de sql 
3.2 Implementar Alembic
4. Crear el frontend con react admin

PRE-RELEASE:
0. VALIDATE IF I DONT NEED TO USE INIT_DB WHEN USING ALEMBIC MIGRATIONS
0.1 ADD "IF RELATED FIELD NOT FOUND THROW HTTP EXCEPTION 404"
1. Complete Business Logic
    1.1. Create a Cyclic Count [DONE]
    1.2. Generate Report and Cyclic Count Results
    1.3. Upload File 
        1.3.1 and Export File to create Cyclic Count [DONE]
    1.4. Consolidated Cyclic Count 
    1.5. Check history of my Cyclic Count and Registry Logs
2. Implement Cyclic Count Kanban
3. Deployment files
4. Multitenancy
5. Use enums instead of string where applies status, registry type, etc...
Testing
1. Unit testing for Inventory models [DONE]
2. Unit testing for Cyclic Count models [DONE]
3. Unit testing for companies models [DONE]

DOCS
1. Populate OpenAPI Docs (api tags, model examples, return codes, error codes)
2. Map exceptions to HTTP_exceptions 
3. Add needed headers to responses
